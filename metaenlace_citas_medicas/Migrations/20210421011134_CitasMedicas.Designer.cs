// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using metaenlace_citas_medicas.Repositories;

namespace metaenlace_citas_medicas.Migrations
{
    [DbContext(typeof(citasMedicasDbContext))]
    [Migration("20210421011134_CitasMedicas")]
    partial class CitasMedicas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicoPaciente", b =>
                {
                    b.Property<int>("medicosuserID")
                        .HasColumnType("int");

                    b.Property<int>("pacientesuserID")
                        .HasColumnType("int");

                    b.HasKey("medicosuserID", "pacientesuserID");

                    b.HasIndex("pacientesuserID");

                    b.ToTable("MedicoPaciente");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Cita", b =>
                {
                    b.Property<int>("citaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("fechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("medicoUserID")
                        .HasColumnType("int");

                    b.Property<string>("motivoCita")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pacienteUserID")
                        .HasColumnType("int");

                    b.HasKey("citaID");

                    b.HasIndex("medicoUserID");

                    b.HasIndex("pacienteUserID");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Diagnostico", b =>
                {
                    b.Property<int>("diagnosticoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("citaID")
                        .HasColumnType("int");

                    b.Property<string>("enfermedad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("valoracionEspecialista")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("diagnosticoID");

                    b.HasIndex("citaID")
                        .IsUnique();

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Usuario", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("USUARIOS");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Medico", b =>
                {
                    b.HasBaseType("metaenlace_citas_medicas.Entities.Usuario");

                    b.Property<string>("numColegiado")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MEDICOS");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Paciente", b =>
                {
                    b.HasBaseType("metaenlace_citas_medicas.Entities.Usuario");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NSS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numTarjeta")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PACIENTES");
                });

            modelBuilder.Entity("MedicoPaciente", b =>
                {
                    b.HasOne("metaenlace_citas_medicas.Entities.Medico", null)
                        .WithMany()
                        .HasForeignKey("medicosuserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("metaenlace_citas_medicas.Entities.Paciente", null)
                        .WithMany()
                        .HasForeignKey("pacientesuserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Cita", b =>
                {
                    b.HasOne("metaenlace_citas_medicas.Entities.Medico", "medico")
                        .WithMany("citas")
                        .HasForeignKey("medicoUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("metaenlace_citas_medicas.Entities.Paciente", "paciente")
                        .WithMany("Citas")
                        .HasForeignKey("pacienteUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medico");

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Diagnostico", b =>
                {
                    b.HasOne("metaenlace_citas_medicas.Entities.Cita", "cita")
                        .WithOne("diagnostico")
                        .HasForeignKey("metaenlace_citas_medicas.Entities.Diagnostico", "citaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cita");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Medico", b =>
                {
                    b.HasOne("metaenlace_citas_medicas.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("metaenlace_citas_medicas.Entities.Medico", "userID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Paciente", b =>
                {
                    b.HasOne("metaenlace_citas_medicas.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("metaenlace_citas_medicas.Entities.Paciente", "userID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Cita", b =>
                {
                    b.Navigation("diagnostico");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Medico", b =>
                {
                    b.Navigation("citas");
                });

            modelBuilder.Entity("metaenlace_citas_medicas.Entities.Paciente", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
